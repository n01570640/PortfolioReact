const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true, index: true },
  hashedPassword: { type: String, required: true },
  userType: { type: String, enum: ['Admin', 'Pharmacist', 'Patient'], required: true }
});

module.exports = mongoose.model('User', userSchema);

const pharmacistSchema = new mongoose.Schema({
  pharmacistId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  licenseNumber: { type: String, required: true, unique: true }
});

module.exports = mongoose.model('Pharmacist', pharmacistSchema);

const patientSchema = new mongoose.Schema({
  patientId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  groupId: String,
  insName: String,
  dateOfBirth: Date,
  firstName: String,
  lastName: String,
  telephoneNumber: String
});

module.exports = mongoose.model('Patient', patientSchema);

const medicationSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: String,
  price: Number,
  quantityAvailable: Number,
  reorderThreshold: Number,
  dosage: String,
  requiresPrescription: Boolean
});

medicationSchema.index({ name: 1 }); // Index on name

module.exports = mongoose.model('Medication', medicationSchema);

const refillRequestSchema = new mongoose.Schema({
  patientId: { type: mongoose.Schema.Types.ObjectId, ref: 'Patient', required: true, index: true },
  medicationId: { type: mongoose.Schema.Types.ObjectId, ref: 'Medication', required: true },
  requestDate: Date,
  status: { type: String, enum: ['Submitted', 'Filling', 'Ready for Pickup'], required: true },
  pharmacistId: { type: mongoose.Schema.Types.ObjectId, ref: 'Pharmacist' }
});

module.exports = mongoose.model('RefillRequest', refillRequestSchema);

const orderSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  medications: [{
    medication: { type: mongoose.Schema.Types.ObjectId, ref: 'Medication' },
    quantity: Number
  }],
  totalPrice: Number,
  orderStatus: { type: String, enum: ['Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled'], required: true },
  createdAt: Date,
  updatedAt: Date
});

module.exports = mongoose.model('Order', orderSchema);


const notificationSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  message: String,
  type: { type: String, enum: ['OrderUpdate', 'InventoryAlert', 'GeneralInfo'] },
  createdAt: Date,
  isRead: Boolean
});

module.exports = mongoose.model('Notification', notificationSchema);

const patientRecordSchema = new mongoose.Schema({
  patientId: { type: mongoose.Schema.Types.ObjectId, ref: 'Patient', required: true, index: true },
  prescriptionDetails: [{
    medicationId: { type: mongoose.Schema.Types.ObjectId, ref: 'Medication' },
    quantity: Number,
    dosage: String
  }],
  prescriptionDate: Date,
  lastRefillDate: Date
});

module.exports = mongoose.model('PatientRecord', patientRecordSchema);