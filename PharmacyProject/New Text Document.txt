const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true, index: true },
  hashedPassword: { type: String, required: true },
  userType: { type: String, enum: ['Admin', 'Pharmacist', 'Patient'], required: true }
});

module.exports = mongoose.model('User', userSchema);

const pharmacistSchema = new mongoose.Schema({
  pharmacistId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  licenseNumber: { type: String, required: true, unique: true }
});

module.exports = mongoose.model('Pharmacist', pharmacistSchema);

const patientSchema = new mongoose.Schema({
  patientId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  groupId: String,
  insName: String,
  dateOfBirth: Date,
  firstName: String,
  lastName: String,
  telephoneNumber: String
});

module.exports = mongoose.model('Patient', patientSchema);

const medicationSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: String,
  price: Number,
  quantityAvailable: Number,
  reorderThreshold: Number,
  dosage: String,
  requiresPrescription: Boolean
});

medicationSchema.index({ name: 1 }); // Index on name

module.exports = mongoose.model('Medication', medicationSchema);

const refillRequestSchema = new mongoose.Schema({
  patientId: { type: mongoose.Schema.Types.ObjectId, ref: 'Patient', required: true, index: true },
  medicationId: { type: mongoose.Schema.Types.ObjectId, ref: 'Medication', required: true },
  requestDate: Date,
  status: { type: String, enum: ['Submitted', 'Filling', 'Ready for Pickup'], required: true },
  pharmacistId: { type: mongoose.Schema.Types.ObjectId, ref: 'Pharmacist' }
});

module.exports = mongoose.model('RefillRequest', refillRequestSchema);

const orderSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  medications: [{
    medication: { type: mongoose.Schema.Types.ObjectId, ref: 'Medication' },
    quantity: Number
  }],
  totalPrice: Number,
  orderStatus: { type: String, enum: ['Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled'], required: true },
  createdAt: Date,
  updatedAt: Date
});

module.exports = mongoose.model('Order', orderSchema);


const notificationSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  message: String,
  type: { type: String, enum: ['OrderUpdate', 'InventoryAlert', 'GeneralInfo'] },
  createdAt: Date,
  isRead: Boolean
});

module.exports = mongoose.model('Notification', notificationSchema);

const patientRecordSchema = new mongoose.Schema({
  patientId: { type: mongoose.Schema.Types.ObjectId, ref: 'Patient', required: true, index: true },
  prescriptionDetails: [{
    medicationId: { type: mongoose.Schema.Types.ObjectId, ref: 'Medication' },
    quantity: Number,
    dosage: String
  }],
  prescriptionDate: Date,
  lastRefillDate: Date
});

module.exports = mongoose.model('PatientRecord', patientRecordSchema);


#########################################################################
mock up data
const patients = [
  {
    patientId: new mongoose.Types.ObjectId(), // Unique ObjectId
    groupId: "12345-ABCDE",
    insName: "HealthInsure Inc.",
    dateOfBirth: new Date(1980, 6, 15), // July 15, 1980 (Month is 0-indexed)
    firstName: "John",
    lastName: "Doe",
    telephoneNumber: "555-1234"
  },
  {
    patientId: new mongoose.Types.ObjectId(),
    groupId: "67890-FGHIJ",
    insName: "CarePlus Health",
    dateOfBirth: new Date(1992, 11, 22), // December 22, 1992
    firstName: "Jane",
    lastName: "Smith",
    telephoneNumber: "555-5678"
  },
  {
    patientId: new mongoose.Types.ObjectId(),
    groupId: "13579-KLMNO",
    insName: "WellBeing Coverage",
    dateOfBirth: new Date(1975, 2, 28), // March 28, 1975
    firstName: "Alice",
    lastName: "Johnson",
    telephoneNumber: "555-9101"
  }
];

//mongodb compass

[{
  "_id": {
    "$oid": "6568e7b7d8aa0a3d6de4396f"
  },
  "groupId": "12345-ABCDE",
  "insName": "HealthInsure Inc.",
  "datOfBirth": {
    "$date":"1980-07-15T00:00:00.000Z"
  },
  "firstName": "John",
  "lastName": "Doe",
  "telephoneNumber": "555-5678"
},
{
  "_id": {
    "$oid": "6568ea23d8aa0a3d6de43974"
  },
  "groupId": "67890-FGHIJ",
  "insName": "CarePlus Health",
  "datOfBirth": {
    "$date":"1992-11-22T00:00:00.000Z"
  },
  "firstName": "Jane",
  "lastName": "Smith",
  "telephoneNumber": "555-5678"
},
  {
  "_id": {
    "$oid": "6568ea3cd8aa0a3d6de43976"
  },
  "groupId": "13579-KLMNO",
  "insName": "WellBeing Coverage",
  "datOfBirth": {
    "$date":"1975-02-28T00:00:00.000Z"
  },
  "firstName": "Alice",
  "lastName": "Johnson",
  "telephoneNumber": "555-9101"
}
  

]

##############################################################
mock up for Medication
const medications = [
  {
    name: "Amoxicillin",
    description: "Antibiotic used to treat a number of bacterial infections.",
    price: 25.99,
    quantityAvailable: 150,
    reorderThreshold: 50,
    dosage: "500mg",
    requiresPrescription: true
  },
  {
    name: "Ibuprofen",
    description: "Medication in the nonsteroidal anti-inflammatory drug (NSAID) class that is used for treating pain, fever, and inflammation.",
    price: 15.49,
    quantityAvailable: 200,
    reorderThreshold: 75,
    dosage: "200mg",
    requiresPrescription: false
  },
  {
    name: "Lisinopril",
    description: "Medication used to treat high blood pressure and heart failure.",
    price: 35.20,
    quantityAvailable: 120,
    reorderThreshold: 40,
    dosage: "10mg",
    requiresPrescription: true
  },
  {
    name: "Metformin",
    description: "Medication used to treat type 2 diabetes.",
    price: 22.10,
    quantityAvailable: 180,
    reorderThreshold: 60,
    dosage: "500mg",
    requiresPrescription: true
  },
  {
    name: "Omeprazole",
    description: "Medication used in the treatment of gastroesophageal reflux disease, peptic ulcer disease, and Zollinger–Ellison syndrome.",
    price: 30.75,
    quantityAvailable: 90,
    reorderThreshold: 30,
    dosage: "20mg",
    requiresPrescription: true
  }
];

//mongo compass
[{
  "name": "Amoxicillin",
  "description": "Antibiotic used to treat a number of bacterial infections.",
  "price": 25.99,
  "quantityAvailable": 150,
  "reorderThreshold": 50,
  "dosage": "500mg",
  "requiresPrescription": true
},
  {
  "name": "Ibprofen",
  "description": "Medication in the nonsteroidal anti-inflammatory drug (NSAID) class that is used for treating pain, fever, and inflammation.",
  "price": 15.49,
  "quantityAvailable": 200,
  "reorderThreshold": 75,
  "dosage": "200mg",
  "requiresPrescription": false
},
{
  "name": "Lisinopril",
  "description": "Medication used to treat high blood pressure and heart failure.",
  "price": 35.20,
  "quantityAvailable": 120,
  "reorderThreshold": 40,
  "dosage": "10mg",
  "requiresPrescription": true
},
{
  "name": "Metformin",
  "description": "Medication used to treat type 2 diabetes.",
  "price": 22.10,
  "quantityAvailable": 180,
  "reorderThreshold": 60,
  "dosage": "500mg",
  "requiresPrescription": true
},
{
  "name": "Omeprazole",
  "description": "Medication used in the treatment of gastroesophageal reflux disease, peptic ulcer disease, and Zollinger–Ellison syndrome.",
  "price": 30.75,
  "quantityAvailable": 90,
  "reorderThreshold": 30,
  "dosage": "20mg",
  "requiresPrescription": true
}


]


